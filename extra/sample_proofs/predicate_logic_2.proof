(* author: Yu-Yang Lin *)
(* date: 06/09/2015 *)
(* this file contains a proof for a more concrete predicate 'notzero', which has it's own definitions *)
(* To use these, I treat predicates with definitions as any other function term, and build propositions using equality *)

Signatures:
    notzero : nat -> bool ;
    plus : nat -> nat -> nat ;

Definitions:
    [notzero 0] : notzero zero = false : bool ;
    [notzero n] : forall n : nat . notzero (suc n) = true : bool ;

    [plus 0] : forall n : nat . plus zero n = n : nat ;
    [plus m] : forall m : nat . forall n : nat . plus (suc m) n = suc (plus m n) : nat ;

    [notzero 0 absurd] : notzero zero = true : bool => Falsity ;
    [notzero n absurd] : forall n : nat . notzero (suc n) = false : bool => Falsity ;

Theorem [notzero m plus n]:
    Statement: forall m : nat . forall n : nat .
               (notzero m = true : bool) and (notzero n = true : bool) => (notzero (plus m n) = true : bool)
    Proof:
        by induction on nat :
        case zero :

            assume n : nat .
            assume [H] : (notzero zero = true : bool) and (notzero n = true : bool) .
            we know ([notzero 0 true],[notzero n true]) because [H] .
            we know [negation] : Falsity because [notzero 0 absurd] with ([notzero 0 true]).
            by absurdity of [negation]

        case (suc m) : [IH].

            assume n : nat .
            assume [H] : (notzero (suc m) = true : bool) and (notzero n = true : bool) .

            we know [plus suc m n] : plus (suc m) n = suc (plus m n) : nat
            because [plus m] with (m,n) .

            we know [notzero suc plus m n] : notzero (suc (plus m n)) = true : bool
            because [notzero n] with (plus m n) .

            equality on ([plus suc m n],[notzero suc plus m n])
    QED.