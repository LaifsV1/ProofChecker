Signatures:
    append : 'a list -> 'a list -> 'a list ;
    rev    : 'a list -> 'a list ;

Definitions:
    [append nil] : forall xs : 'a list . append [] xs = xs : 'a list ;
    [append xs]  : forall xs : 'a list . forall x : 'a . forall ys : 'a list . append (x::xs) ys = x :: append xs ys : 'a list ;
    [rev nil]    : rev [] = [] : 'a list ;
    [rev xs]     : forall xs : 'a list . forall x : 'a . rev (x :: xs) = append (rev xs) (x :: []) : 'a list ;

Theorem [rev lemma] :
    Statement: forall xs : 'a list . forall x : 'a . rev (append xs (x::[])) = x :: (rev xs) : 'a list
    Proof:

        by induction on list :

        case [] :

            assume x : 'a .

            we know [prop a] : append [] (x :: []) = (x :: [])                 : 'a list because [append nil] with (x::[]).
            we know [prop b] : rev (x::[]) = append (rev []) (x :: [])         : 'a list because [rev xs]     with ([],x).
            we know [prop c] : append (rev []) (x :: []) = append [] (x :: []) : 'a list because equality on ([rev nil]).
            we know [prop d] : (x :: []) = (x :: (rev []))                     : 'a list because equality on ([rev nil]).

            we know [step 1] : rev (append [] (x::[])) = rev (x::[])               : 'a list because equality on ([prop a]).
            we know [step 2] : rev (append [] (x::[])) = append (rev []) (x :: []) : 'a list because equality on ([step 1],[prop b]).
            we know [step 3] : rev (append [] (x::[])) = append [] (x :: [])       : 'a list because equality on ([step 2],[prop c]).
            we know [step 4] : rev (append [] (x::[])) = (x :: [])                 : 'a list because equality on ([step 3],[prop a]).
            we know [step 5] : rev (append [] (x::[])) = (x :: (rev []))           : 'a list because equality on ([step 4],[prop d]).

            by [step 5]

        case (hd::tl) : [IH] : forall x : 'a . rev (append tl (x::[])) = x :: (rev tl) : 'a list .

            assume x : 'a .

            we know [prop a] : append (hd::tl) (x::[]) = hd :: (append tl (x::[])) : 'a list
            because [append xs] with (tl,hd,(x::[])).
            we know [prop b] : rev (hd :: (append tl (x::[]))) = append (rev (append tl (x::[]))) (hd :: [])  : 'a list
            because [rev xs] with (append tl (x::[]),hd).
            we know [prop c] : append (x :: (rev tl)) (hd :: []) = x :: append (rev tl) (hd :: []) : 'a list
            because [append xs] with ((rev tl),x,(hd :: [])).
            we know [prop d] : rev (hd::tl) = append (rev tl) (hd :: []) : 'a list
            because [rev xs] with (tl,hd).
            we know [prop e] : rev (append tl (x::[])) = x :: (rev tl) : 'a list
            because [IH] with (x).

            we know [step 1] : rev (append (hd::tl) (x::[])) = rev (hd :: (append tl (x::[]))) : 'a list
            because equality on ([prop a]).
            we know [step 2] : rev (append (hd::tl) (x::[])) = append (rev (append tl (x::[]))) (hd :: []) : 'a list
            because equality on ([step 1],[prop b]).
            we know [step 3] : rev (append (hd::tl) (x::[])) = append (x :: (rev tl)) (hd :: []) : 'a list
            because equality on ([step 2],[prop e]).
            we know [step 4] : rev (append (hd::tl) (x::[])) = x :: append (rev tl) (hd :: []) : 'a list
            because equality on ([step 3],[prop c]).
            we know [step 5] : rev (append (hd::tl) (x::[])) = x :: rev (hd::tl) : 'a list
            because equality on ([step 4],[prop d]).

            by [step 5]
    QED.

Theorem [involution of rev] :
    Statement: forall xs : 'a list . rev (rev xs) = xs : 'a list
    Proof:

        by induction on list :

        case [] :

            equality on ([rev nil])

        case (hd :: tl) : [inductive hypothesis] .

            we know [step 1] : rev (hd :: tl) = append (rev tl) (hd::[])             : 'a list because [rev xs] with (tl,hd).
            we know [step 2] : rev (append (rev tl) (hd::[])) = hd :: (rev (rev tl)) : 'a list because [rev lemma] with (rev tl,hd) .

            equality on ([step 1], [step 2], [inductive hypothesis])
    QED.
